#include <stdio.h>
#include <limits.h>

// Structure to store the maximum and minimum elements
typedef struct {
    int max;
    int min;
} MinMax;

// Function to find the minimum and maximum elements using Divide and Conquer
MinMax find_min_max(int arr[], int left, int right) {
    MinMax result;
    MinMax left_result, right_result;

    // Base case: if there is only one element in the list
    if (left == right) {
        result.max = arr[left];
        result.min = arr[left];
        return result;
    }

    // Base case: if there are two elements in the list
    if (right == left + 1) {
        if (arr[left] > arr[right]) {
            result.max = arr[left];
            result.min = arr[right];
        } else {
            result.max = arr[right];
            result.min = arr[left];
        }
        return result;
    }

    // Divide the list into two halves
    int mid = (left + right) / 2;

    // Recursively find the minimum and maximum elements in the left and right halves
    left_result = find_min_max(arr, left, mid);
    right_result = find_min_max(arr, mid + 1, right);

    // Combine the results from the left and right halves
    result.max = (left_result.max > right_result.max) ? left_result.max : right_result.max;
    result.min = (left_result.min < right_result.min) ? left_result.min : right_result.min;

    return result;
}

int main() {
    int n;

    // Ask user for the number of elements in the list
    printf("Enter the number of elements in the list: ");
    scanf("%d", &n);

    // Declare the list
    int list[n];

    // Input elements of the list
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &list[i]);
    }

    // Find the minimum and maximum elements using Divide and Conquer
    MinMax result = find_min_max(list, 0, n - 1);

    // Print the minimum and maximum elements
    printf("Minimum element: %d\n", result.min);
    printf("Maximum element: %d\n", result.max);

    return 0;
}
