#include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the 0/1 Knapsack Problem
int knapsack(int W, int weights[], int values[], int n) {
    int K[n + 1][W + 1];

    // Build the table K[][] in bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                K[i][w] = 0; // Base case: no item or no capacity
            } else if (weights[i - 1] <= w) {
                K[i][w] = max(values[i - 1] + K[i - 1][w - weights[i - 1]], K[i - 1][w]);
            } else {
                K[i][w] = K[i - 1][w]; // Item cannot be included
            }
        }
    }

    return K[n][W]; // The maximum value that can be obtained
}

int main() {
    int n, W;

    // Input number of items and capacity of the knapsack
    printf("Enter the number of items: ");
    scanf("%d", &n);

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &W);

    int weights[n], values[n];

    // Input weights and values of the items
    printf("Enter the weights of the items:\n");
    for (int i = 0; i < n; i++) {
        printf("Weight of item %d: ", i + 1);
        scanf("%d", &weights[i]);
    }

    printf("Enter the values of the items:\n");
    for (int i = 0; i < n; i++) {
        printf("Value of item %d: ", i + 1);
        scanf("%d", &values[i]);
    }

    // Calculate and print the optimal cost
    int optimal_cost = knapsack(W, weights, values, n);
    printf("The optimal cost (maximum value) is: %d\n", optimal_cost);

    return 0;
}
