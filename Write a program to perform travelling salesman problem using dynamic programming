#include <stdio.h>
#include <limits.h>

#define MAX 20
#define INF INT_MAX

int n; // Number of cities
int cost[MAX][MAX]; // Cost matrix
int dp[1 << MAX][MAX]; // DP table

// Function to find the minimum cost of visiting all cities
int tsp(int mask, int pos) {
    // If all cities have been visited, return to starting city
    if (mask == (1 << n) - 1) {
        return cost[pos][0]; // Return cost to the starting city
    }

    // If already computed, return the stored result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INF; // Initialize answer to infinity

    // Try to go to every other city
    for (int city = 0; city < n; city++) {
        // If the city has not been visited
        if ((mask & (1 << city)) == 0) {
            // Recur for the next city
            int newAns = cost[pos][city] + tsp(mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns; // Update the answer
        }
    }

    return dp[mask][pos] = ans; // Store and return the result
}

int main() {
    printf("Enter the number of cities: ");
    scanf("%d", &n);

    printf("Enter the cost matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    // Initialize the DP table
    for (int i = 0; i < (1 << n); i++) {
        for (int j = 0; j < n; j++) {
            dp[i][j] = -1; // Mark all states as unvisited
        }
    }

    // Start the TSP from the first city (0)
    int result = tsp(1, 0); // Start with city 0 visited

    printf("Minimum cost of visiting all cities: %d\n", result);

    return 0;
}
